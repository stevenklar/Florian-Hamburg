/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de	                */
/*                                                                              */
/* EXTINGUISH.SCRIPT - Script zum Löschen					*/
/*                                                                              */
/* Dieses Commandscript regelt das Löschen von brennenden Objekten.  		*/
/*                                                                              */
/* Original-Script: Sixteen Tons, Witchdoc					*/
/* Änderungen von : Eins Eins Zwo Modifications                                 */
/*                                                                              */
/* 16.09.2007, SM,   Initial-Version                                            */
/* 13.08.2008, SM,   Gefahrgut-Behandlung hinzugefügt                           */
/*                                                                              */
/* **************************************************************************** */

object Extinguish : CommandScript
{
	bool useDLKlogic;

	Extinguish()
	{
		SetValidTargets(ACTOR_OBJECT | ACTOR_VEHICLE | ACTOR_HOUSE | ACTOR_OPEN_HOUSE);
		SetRestrictions(RESTRICT_BURNING);
		SetKeepAsCurrentCommand(true);
		SetPossibleCallers(ACTOR_PERSON | ACTOR_VEHICLE);
		SetPossibleEquipment(EQUIP_FIRE_EXTINGUISHER | EQUIP_FIREHOSE);
		SetPossibleExists(CPE_EXTINGUISHABLE_OBJECTS);
		SetNeedsConnectedHose(CFN_NEEDED);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target || !Target->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		if(Target->GetType() == ACTOR_PERSON)
			return false;

		GameObject o(Target);
		if(!o.IsValid() || !o.IsBurning() || o.GetNumActiveFireChilds() == 0)
			return false;

		if (Caller->GetType() == ACTOR_PERSON )
		{
			Person p(Caller);
			if (p.GetEquipment() == EQUIP_FIREHOSE && o.GetParentHouseID() > -1)
				return false;
			if (p.CanUseDLKCannon())
			{
				useDLKlogic = true;
				if (o.GetNumActiveFireChilds() == 0)
					return false;
				if (p.GetEnteredCarTargetID() != -1 && p.GetEnteredCarTargetID() != Target->GetID())
					return false;
				if (p.GetEnteredCarID() == Target->GetID())
					return false;
				
				if (p.GetEnteredCarTargetID() != -1 && !o.IsBurningInside())
					return false;
				else 
				if (p.GetEnteredCarTargetID() == -1 && !o.IsBurningOutside())
					return false;
				
				if (!p.CheckDLKExtinguishDistance(Target))
					return false;
				
				return true;
			}
			if (p.GetEnteredCarID() != -1)
				return false;
		}
		useDLKlogic = false;
			
		if (Caller->GetType() == ACTOR_VEHICLE || Caller->GetEquipment()==EQUIP_FIRE_EXTINGUISHER || Caller->GetEquipment()== EQUIP_FIREHOSE)
		{
			if (Caller->GetEquipment() == EQUIP_FIREHOSE && Caller->GetFirehoseID() == 0)
				return false;
			return true;
		}
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		GameObject gefahrgut(Target);

		if (useDLKlogic)
		{
			Person p(Caller);
			if (p.GetEnteredCarTargetID() == -1)
			{
				Caller->PushActionTurnBase(ACTION_NEWLIST, Target);
				Caller->PushActionCannonExtinguish(ACTION_APPEND, Target, 25.f, false);
				gefahrgut.PushActionExecuteCommand(ACTION_INSERT,"gefahrgut_check",Caller,1,false);
			} else {
				Caller->PushActionCannonExtinguish(ACTION_NEWLIST, Target, 25.f, false);
				gefahrgut.PushActionExecuteCommand(ACTION_INSERT,"gefahrgut_check",Caller,1,false);
			}
			return;
		}

		if (Caller->GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Caller);

			float Energy;
			if(v.GetVehicleType()==VT_FIREFIGHTERS_TLF)
				Energy = 75.0f;
			else
			if(v.GetVehicleType()==VT_FIREFIGHTERS_FLB)
				Energy = 30.0f;
			else
			if(v.GetVehicleType()==VT_FIREFIGHTERS_LPF)
				Energy = 25.0f;
			else
				Energy = 70.0f;

			GameObject o(Target);
			if (!v.CheckExtinguishDistance(o))
			{
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EXTINGUISH);
				Caller->PushActionExtinguish(ACTION_APPEND, Target, Energy);
			}
			else
				Caller->PushActionExtinguish(ACTION_NEWLIST, Target, Energy);
				gefahrgut.PushActionExecuteCommand(ACTION_INSERT,"gefahrgut_check",Caller,1,false);
		}
		else
		{
			if (Target->GetType()==ACTOR_VEHICLE)
			{
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_ENGINE_EXTINGUISH);
				Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_ENGINE);
				Caller->PushActionTurnTo(ACTION_APPEND, TargetPos);
			}
			else
			{
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EXTINGUISH_PERSON);
				Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_FLAME_EFFECT);
				Caller->PushActionTurnTo(ACTION_APPEND, TargetPos);
			}

			float Energy = (Caller->GetEquipment()==EQUIP_FIREHOSE) ? 25.0f : 12.5f;
			if (Caller->GetUserData() == 111)
			{
				Energy=50;			
			}
			Caller->PushActionExtinguish(ACTION_APPEND, Target, Energy);
			gefahrgut.PushActionExecuteCommand(ACTION_INSERT,"gefahrgut_check",Caller,1,false);
		}

		if (Caller->GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Caller);
			v.PushActionExecuteCommand(ACTION_APPEND, "DUMMYDisableSiren", Caller, 2, false);
		}
	}

};