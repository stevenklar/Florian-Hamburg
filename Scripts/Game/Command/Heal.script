/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de	                */
/*                                                                              */
/* HEAL.SCRIPT - Script zur Versorgung von Verletzten.                          */
/*                                                                              */
/* Dieses Commandscript dient zum Versorgen von Verletzten und (wenn nötig) zum */
/* Alarmieren eines Notarztes, falls die RTW-Besatzung den Patienten nicht      */
/* stabilisieren kann.                                                          */
/*                                                                              */
/* Original-Script: Sixteen Tons, Witchdoc, Bass-Ti				*/
/* Änderungen von : Eins Eins Zwo Modifications                                 */
/*                                                                              */
/* 16.09.2007, SM,   Initial-Version                                            */
/* 04.12.2007, SM,   Bei verstorbenen Patienten, wird ein Bestatter gerufen.    */
/* 26.06.2008, SM,   Fehler, dass das NEF bei Nachalarmierung nicht zum         */
/* 		     Zielpunkt gefahren ist, behoben.                           */
/* 11.08.2008, SM,   Bug behoben, dass der NA beim Behandlen von Einsatzkräften */
/* 		     nicht zur Einsatzkraft gegangen ist.                       */
/* 16.11.2008, SM,   Bug behoben, das verletzte Einsatzkräfte nicht             */
/* 		     abtransportiert werden konnten.                            */
/* 21.11.2008, SM,   Bug behoben, dass Fahrzeuge verschwunden sind, wenn eine	*/
/* 		     behandelte Person eingestiegen ist.                        */
/*                                                                              */
/* **************************************************************************** */

object Heal : CommandScript
{
	Heal()
	{
		SetValidTargets(ACTOR_PERSON | ACTOR_VEHICLE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target->IsValid() || Target->GetID() == Caller->GetID())
			return false;

		if(Target->GetType()==ACTOR_PERSON)
		{
			Person p(Target);
			if(!p.IsDrowning() && !p.IsHealing() && p.GetRole() != ROLE_ANIMAL && !p.IsRescueDog() && (p.IsInjured() || p.IsWoundedSquad()) && p.GetEnteredCarID() == -1 && !p.IsCarried())
				return true;
		}

		if(Target->GetType()==ACTOR_VEHICLE)
		{
			GameObject obj(Target);
			Person p(Caller);
			if (obj.IsFlagSet(OF_PERSON_ENCLOSED) && !p.IsRescueDog())
				return true;
		}
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		switch(childID)
		{
			case 0:		// PATIENT VERSORGEN
				Person p(Target);
				if (p.GetRole() == ROLE_SQUAD)
				{
					p.SetClassified(true);
					if (p.IsInjured())
						p.SetUserData(42);
					Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_TREATMENT);
					Caller->PushActionTurnTo(ACTION_APPEND, Target);
					Caller->PushActionHeal(ACTION_APPEND, Target);
					Caller->PushActionExecuteCommand(ACTION_APPEND,"Heal",Target,1,false);
					return;
				}

				bool carriedClassified = false;
				if (p.IsClassified())
				carriedClassified = true;

				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_TREATMENT);
				Caller->PushActionTurnTo(ACTION_APPEND, Target);
				Person ra(Caller);
	
				if (ra.IsParamedicTeam())
				{
					Caller->PushActionExecuteCommand(ACTION_APPEND,"Heal",Target,2,false);
					Caller->PushActionHeal(ACTION_APPEND, Target, true);
				} 
				else 
				{
					if (Target->GetType() == ACTOR_VEHICLE)
					{
						Vehicle veh(Target);
						Caller->PushActionMove(ACTION_APPEND,Target,TARGET_SHEARSDOOR);
						Caller->PushActionTurnTo(ACTION_APPEND, Target);
						Caller->PushActionSwitchAnim(ACTION_APPEND, "treatinjured2");
						PersonList pl(Target->GetName());
						if (pl.GetNumPersons() > 0)
						{
							Person p=pl.GetPerson(0);
							p.SetClassified(true);
							Caller->PushActionHeal(ACTION_APPEND, &p);
							Caller->PushActionExecuteCommand(ACTION_APPEND,"Heal",&p,1,false);
						}
					} 
					else 
					{
						Caller->PushActionHeal(ACTION_APPEND, Target);
						Caller->PushActionExecuteCommand(ACTION_APPEND,"Heal",Target,1,false);
					}
					p.SetUserData(42);
				}
			break;

			case 1:			// PRÜFEN OB PATIENT TOT
		   		Person p(Target);
   				if (p.IsDead())
		   		{
					p.SetUserData(42);
					p.SetClassified(true);
   					Mission::PlayHint("Die Person ist verstorben!");
		   		}
			break;

			case 2:			// PATIENT IST UND BLEIBT VERSORGT
				Person p(Target);
				Person ra(Caller);
				if ((p.GetLife() < 200) && (p.GetUserData() != 42) && (p.GetUserData() != 43))
				{
				}
				//Person bleibt stabil
				p.SetInjuredLifeDrain(p.GetInjuredLifeDrain()/4);
				p.SetClassified(true);
				if (p.GetUserData() != 42)
					p.SetUserData(43);
			break;
		}

	}
};