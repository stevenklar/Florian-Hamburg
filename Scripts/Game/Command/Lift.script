/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de		        */
/*                                                                              */
/* LIFT.SCRIPT - Script zum Anheben von Personen und Objekten.			*/
/*                                                                              */
/* Dieses Commandscript dient zum Anheben von Personen und Objekten durch	*/
/* Einsatzkräfte.                                                               */
/*                                                                              */
/* Original-Script  : sixteen tons entertainment		                */
/* Änderungen von   : Eins Eins Zwo Modifications                               */
/*                                                                              */
/* 16.11.2008, SM,   Initial-Version                                            */
/*                                                                              */
/* **************************************************************************** */

object Lift : CommandScript
{
	Lift()
	{
		SetIcon("liftperson");
		SetCursor("liftperson");
		SetValidTargets(ACTOR_PERSON);
		SetGroupID(CGROUP_CARRY_PERSON);
		SetGroupLeader(true);
		SetPriority(400);
		SetSelfClickActivation(true);
		SetPossibleExists(CPE_DROWNING_PERSONS | CPE_INJURED_PERSON);
		SetPossibleEquipment(EQUIP_NONE);
	}

	bool CheckGroupVisibility(GameObject *Caller)
	{
		if(!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;
		Person p(Caller);
		if (p.IsCarryingPerson())
			return false;
		if (p.HasCommand("Dive"))
			return Game::ExistsDrowningPerson();
		return Game::ExistsInjuredPerson();
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || Caller->IsEquipped() || !Target->IsValid() || Target->GetID() == Caller->GetID())
			return false;

		Person p(Caller);
		Person t(Target);
		if(p.IsValid() && !p.IsCarryingPerson()&& !p.IsLinkedWithPerson() && !p.IsPulling()
			&& t.IsValid() && t.IsInjured() && !t.IsCarried() && t.GetRole()!=ROLE_ANIMAL && !t.IsRescueDog())
		{
			if (p.GetEnteredCarID() != -1 && p.GetEnteredCarTargetID() != t.GetEnteredHouseID())
				return false;
			if (p.GetEnteredCarID() == -1 && t.GetEnteredHouseID() != -1 && t.GetEnteredHouseID() != p.GetEnteredHouseID() && !t.IsInHouseWithGroundEntrance())
				return false;
			// Taucher nimmt nur Ertrinkende Personen auf
			if (p.HasCommand("Dive") && !t.IsDrowning())
				return false;
			if(!p.HasCommand("Dive") && t.IsDrowning())
				return false;
			if (t.HasCommand("hrettung_target"))
				return false;				
			return true;
		}
		
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		if (p.GetEnteredCarID() == -1)
		{
			if (p.HasCommand("Dive"))
				Caller->PushActionMove(ACTION_APPEND, Target, TARGET_FOLLOW);
			else
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_TOUCHPERSON);
			Caller->PushActionTurnTo(ACTION_APPEND, Target);
		}
		else
		{
			Person pt(Target);
			if (pt.GetEnteredHouseID() == p.GetEnteredCarTargetID())
			{
				Caller->PushActionEnterHouse(ACTION_NEWLIST, pt.GetEnteredHouseID());
				Caller->PushActionMove(ACTION_APPEND, Target, TARGET_TOUCHPERSON);
				Caller->PushActionTurnTo(ACTION_APPEND, Target);
			}
			else
				Caller->PushActionTurnTo(ACTION_NEWLIST, Target);
		}
		Caller->PushActionLift(ACTION_APPEND, Target);  
	}
};
