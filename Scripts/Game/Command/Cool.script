/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de	                */
/*                                                                              */
/* COOL.SCRIPT - Script zum Kühlen 					        */
/*                                                                              */
/* Dieses Commandscript regelt das Kühlen von brennenden Objekten.  		*/
/*                                                                              */
/* Original-Script: Sixteen Tons, Witchdoc					*/
/* Änderungen von : Eins Eins Zwo Modifications                                 */
/*                                                                              */
/* 16.09.2007, SM,   Initial-Version                                            */
/* 13.08.2008, SM,   Gefahrgut-Behandlung hinzugefügt                           */
/*                                                                              */
/* **************************************************************************** */

object Cool : CommandScript
{
	bool useDLKlogic;

	Cool()
	{
		SetValidTargets(ACTOR_VEHICLE | ACTOR_OBJECT | ACTOR_HOUSE | ACTOR_OPEN_HOUSE);
		SetRestrictions(RESTRICT_COOLABLE | RESTRICT_NOTBURNING);
		SetKeepAsCurrentCommand(true);
		SetPossibleCallers(ACTOR_PERSON | ACTOR_VEHICLE);
		SetPossibleEquipment(EQUIP_FIRE_EXTINGUISHER | EQUIP_FIREHOSE);
		SetPossibleExists(CPE_COOLABLE_OBJECTS);
		SetNeedsConnectedHose(CFN_NEEDED);
		SetPriority(91);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target || !Target->IsValid() || Caller->GetID() == Target->GetID())
			return false;

		if(Target->GetType() == ACTOR_PERSON)
			return false;

		GameObject o(Target);
		if (!o.IsValid() || o.GetNumActiveFireChilds() == 0)
			return false;
			
		if (o.GetType() == ACTOR_VEHICLE)
		{
			Vehicle v(Target);
			if ((v.GetVehicleType() == VT_POLICE_PHC || v.GetVehicleType() == VT_AMBULANCE_RHC) && !v.IsOnGround())
			   	return false;
		}
			
		if (Caller->GetType() == ACTOR_PERSON )
		{
			Person p(Caller);
			if (p.GetEquipment() == EQUIP_FIREHOSE && o.GetParentHouseID() > -1)
				return false;
			if (p.CanUseDLKCannon())
			{
				useDLKlogic = true;
				if (o.GetNumActiveFireChilds() == 0)
					return false;
				if (p.GetEnteredCarTargetID() != -1 && p.GetEnteredCarTargetID() != Target->GetID())
					return false;
				if (p.GetEnteredCarID() == Target->GetID())
					return false;
			
				if (!p.CheckDLKExtinguishDistance(Target))
					return false;
			
				if (p.GetEnteredCarTargetID() != -1/* && o.IsBurningInside()*/)
					return false;
				else if (p.GetEnteredCarTargetID() == -1 && o.IsBurningOutside())
					return false;
			
				return true;
			}
			if (p.GetEnteredCarID() != -1)
			   	return false;
		}
		
		useDLKlogic = false;

		if (Caller->GetType() == ACTOR_VEHICLE || Caller->GetEquipment()==EQUIP_FIRE_EXTINGUISHER || Caller->GetEquipment()== EQUIP_FIREHOSE)
		{
			if (Caller->GetEquipment() == EQUIP_FIREHOSE && Caller->GetFirehoseID() == 0)
				return false;
			return true;
		}
		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		GameObject gefahrgut(Target);

		if (!Target)
			return;

		if (useDLKlogic)
		{
			Person p(Caller);
			
			if (p.GetEnteredCarTargetID() != -1)
			{
				Caller->PushActionCannonExtinguish(ACTION_NEWLIST, Target, 100.f, true);
				gefahrgut.PushActionExecuteCommand(ACTION_APPEND,"gefahrgut_check",Caller,1,false);
			}
			else
			{
				Caller->PushActionTurnBase(ACTION_NEWLIST, Target);
				Caller->PushActionCannonExtinguish(ACTION_APPEND, Target, 100.f, true);
				gefahrgut.PushActionExecuteCommand(ACTION_APPEND,"gefahrgut_check",Caller,1,false);
			}
			return;
		}

		if (Caller->GetType() == ACTOR_VEHICLE)
		{
			GameObject o(Target);
			Vehicle v(Caller);
			if (!v.CheckExtinguishDistance(o))
			{
				if (Target->GetType() == ACTOR_VEHICLE)
					Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_ENGINE_EXTINGUISH);
				else
					Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EXTINGUISH);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "DUMMYDisableSiren", Caller, 2, false);
				Caller->PushActionCool(ACTION_APPEND, Target);
				gefahrgut.PushActionExecuteCommand(ACTION_APPEND,"gefahrgut_check",Caller,1,false);
			} else
			  {
				Caller->PushActionExecuteCommand(ACTION_APPEND, "DUMMYDisableSiren", Caller, 2, false);
			    	Caller->PushActionCool(ACTION_NEWLIST, Target);
				gefahrgut.PushActionExecuteCommand(ACTION_INSERT,"gefahrgut_check",Caller,1,false);
			  }
		}
		else if (Caller->GetType() == ACTOR_PERSON)
		{	
			if (Target->GetType()==ACTOR_VEHICLE)
			{
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_ENGINE_EXTINGUISH);
				Vector Pos = Target->GetTargetPoint(Caller, TARGET_ENGINE);
				Caller->PushActionTurnTo(ACTION_APPEND, Pos);
			}
			else
			{
				Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EXTINGUISH);
				Caller->PushActionTurnTo(ACTION_APPEND, Target);
			}
		
		}
		Caller->PushActionCool(ACTION_APPEND, Target);
		gefahrgut.PushActionExecuteCommand(ACTION_APPEND,"gefahrgut_check",Caller,1,false);
	}
	
};