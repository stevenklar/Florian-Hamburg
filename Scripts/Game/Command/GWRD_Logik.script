/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de	                */
/*                                                                              */
/* GWRD_LOGIK.SCRIPT - Auf- und Abbauen des Geräteagen Rettungsdienst F-33 	*/
/* 		       sowie Holen von Patienten aus dem Zelt.                  */
/*                                                                              */
/* Dieses Commandscript dient zum Auf- und Abbauen des GW-RD's von F-33.        */
/* Weiterhin dient es dazu das Holen von Patienten aus dem Zelt zu steuern.     */
/*                                                                              */
/* Original-Script von  : Hoppah				                */
/* Änderungen von       : Eins Eins Zwo Modifications                           */
/*                                                                              */
/* 19.12.2007, SM,   Initial-Version                                            */
/* 02.01.2008, SM,   Unterstützung für Multiplayer-Modus hinzugefügt            */
/*                                                                              */
/* **************************************************************************** */

object gwrd_aufbauen: CommandScript
{
	Vector TargetPos;

	gwrd_aufbauen()
	{
      		SetIcon("wlfunload_f12");
      		SetCursor("wlfunload_f12");
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_INSTALL);
		SetGroupLeader(true);
		SetPriority(50);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
 		if (!Caller->IsValid())
 			return false;

 		if (Caller->GetType() == ACTOR_VEHICLE)
 		{
 			return true;
 		}

 		return false;
 	}

 	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
 	{
 		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID())
 			return false;

 		if (Caller->GetType() == ACTOR_VEHICLE)
 		{
 			return true;
 		}

 		return true;
 	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
        	Vehicle v(Caller);
		Vector CarPos = v.GetPosition();
		CarPos.x -= 0.f;
		CarPos.y -= 0.f;

       		float r[9];
        	v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

		if (Game::FindFreePosition(Caller, CarPos, 200.f))
		{

                	Vehicle m;
                	if(StrCompare(v.GetPrototypeFileName(), "mod:Prototypes/Vehicles/Rettungsdienst Hamburg/f33_gwrd.e4p") == 0)
                 	{
	                       	m = Game::CreateVehicle("mod:Prototypes/Vehicles/Rettungsdienst Hamburg/f33_gwrd_aufgebaut.e4p", "gwrd");
				if (Game::IsMultiplayer())
				{
					m.SetPlayerMP(Caller->GetPlayerMP());
				}
                 	}
        	        m.SetPosition(CarPos);
                	m.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
                	m.UpdatePlacement();
                	m.SetMaxPassengers(2);
                	m.SetMaxTransports(6);
		m.SetSpeed(0.0f);

			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}

			PersonList transports = v.GetTransports();
			for(int i = 0; i < transports.GetNumPersons(); i++)
			{
				v.RemoveTransport(&transports.GetPerson(i));
				m.AddTransport(&transports.GetPerson(i));
			}

			Caller->PushActionWait(ACTION_APPEND, 0.01f);
			Caller->PushActionDeleteOwner(ACTION_APPEND);
            	} else
		{
		 	Mission::PlayHint("Kein Platz um das Fahrzeug aufzubauen!");
		}
	}
};

object gwrd_abbauen: CommandScript
{
	gwrd_abbauen()
	{
      		SetIcon("wlfupload_f12");
	      	SetCursor("wlfupload_f12");
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupLeader(true);
	}

	bool CheckPossible(GameObject *Caller)
	{
		if (!Caller->IsValid())
			return false;
		if (Caller->GetType()==ACTOR_VEHICLE)
		{
			Vehicle v(Caller);
			if (v.IsInstalled())
			{
				if (v.GetVehicleType() == VT_FIREFIGHTERS_DLK && /*(v.GetInstallTargetID() != -1 ||*/ v.IsUplifting())//)
					return false;
			}
		}
		return true;

	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetID() != Caller->GetID())
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		PersonList PatientenListe = v.GetTransports();
		if (PatientenListe.GetNumPersons() > 0)
		{
			Mission::PlayHint("Es befinden sich noch Patienten im Zelt!");
			return;
		}


		Vector CarPos = v.GetPosition();
		CarPos.x -= 0.f;
		CarPos.y -= 0.f;

       		float r[9];
        	v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);

		if (Game::FindFreePosition(Caller, CarPos, 200.f))
		{

                	Vehicle m;
                	if(StrCompare(v.GetPrototypeFileName(), "mod:Prototypes/Vehicles/Rettungsdienst Hamburg/f33_gwrd_aufgebaut.e4p") == 0)
                 	{
	                       	m = Game::CreateVehicle("mod:Prototypes/Vehicles/Rettungsdienst Hamburg/f33_gwrd.e4p", "f33_gwrd");

				if (Game::IsMultiplayer())
				{
					m.SetPlayerMP(Caller->GetPlayerMP());
				}
                 	}
	                  m.SetPosition(CarPos);
                	m.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
                	m.UpdatePlacement();
                	m.SetMaxPassengers(2);
                	m.SetMaxTransports(0);
			m.SetSpeed(11.0f);

			PersonList passengers = v.GetPassengers();
			for(int i = 0; i < passengers.GetNumPersons(); i++)
			{
				v.RemovePassenger(&passengers.GetPerson(i));
				m.AddPassenger(&passengers.GetPerson(i));
			}

			PersonList transports = v.GetTransports();
			for(int i = 0; i < transports.GetNumPersons(); i++)
			{
				v.RemoveTransport(&transports.GetPerson(i));
				m.AddTransport(&transports.GetPerson(i));
			}

			Caller->PushActionWait(ACTION_APPEND, 0.01f);
			Caller->PushActionDeleteOwner(ACTION_APPEND);
            	} else
		{
		 	Mission::PlayHint("Kein Platz um das Fahrzeug aufzubauen!");
		}
	}
};


object Get_GWRD_Patient : CommandScript
{
	Get_GWRD_Patient()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_NOTDESTROYED | RESTRICT_NOTBURNING);
		SetPossibleCallers(ACTOR_PERSON);
		SetPossibleEquipment(EQUIP_NONE);
		SetIcon("Get_GWRD_Patient");
		SetCursor("Get_GWRD_Patient");
	}

	bool CheckGroupVisibility(GameObject *Caller)
	{
		if (!Caller->IsValid() || Caller->GetType() != ACTOR_PERSON)
			return false;

		Person p(Caller);
		if (p.IsCarryingPerson())
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || Caller->IsEquipped() || !Target->IsValid() || Target->GetID() == Caller->GetID())
			return false;

		Vehicle v(Target);
		if (v.GetVehicleType() != VT_AMBULANCE_ITW && v.GetNumTransported() == 0)
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		switch(childID)
		{
			case 0:
				Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_REARDOOR);
				Caller->PushActionMove(ACTION_NEWLIST, TargetPos);
				Caller->PushActionTurnTo(ACTION_APPEND, Target);
				Caller->PushActionExecuteCommand(ACTION_APPEND, "Get_GWRD_Patient", Target, 1, false);
			break;

			case 1:
				Vehicle v(Target);
				PersonList PatientenListe = v.GetTransports();
				if (!PatientenListe.GetNumPersons() > 0)
				{
					Mission::PlayHint("Es sind keine Patienten im Zelt!");
					return;
				}
				if (v.GetNumTransported() > 0)
				{
					PersonList injuredInside = v.GetTransports();
					Person mInjured = injuredInside.GetPerson(0);
					v.RemoveTransport(&mInjured);
					Vector PPos = Caller->GetPosition();
					mInjured.SetPosition(PPos);
					Caller->PushActionLift(ACTION_NEWLIST, &mInjured);
				}
			break;
		}
	}
};