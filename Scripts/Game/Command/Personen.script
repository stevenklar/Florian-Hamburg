/* **************************************************************************** */
/* Florian Hamburg Mod                                                          */
/* Copyright © Eins Eins Zwo Modifications - www.112-mods.de	                */
/*                                                                              */
/* PERSONEN.SCRIPT - Personen erstellen und umziehen                            */
/*                                                                              */
/* Dieses Commandscript dient zum automatisierten erstellen der einzelnen       */
/* Personen (Einsatzpersonal auf den Fahrzeugen etc.). Weiterhin bietet es die  */
/* Möglichkeit der Einsatzkraft entsprechende Schutzkleidung (PA, CSA,		*/
/* Taucherausrüstung etc.) anzuziehen.						*/
/*                                                                              */
/* Original-Script: Witchdoc		                                        */
/* Änderungen von : Eins Eins Zwo Modifications                                 */
/*                                                                              */
/* 16.09.2007, SM,   Initial-Version                                            */
/* 30.12.2007, SM,   THW-Personal hinzugefügt                                   */
/* 02.01.2008, SM,   Unterstützung für Multiplayer-Modus hinzugefügt            */
/* 28.10.2008, SM,   Führungsdienste in A-, B- und U-Dienst aufgeteilt.         */
/*                                                                              */
/* **************************************************************************** */

//////////////////////////////////////////////////////////////////////////////////////////////////// BLOCK: "EINSATZPERSONAL ERSTELLEN":

object CreateNewPerson: CommandScript
{

	CreateNewPerson()
	{
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		//Erzeuge eine neue Person

		int zufall = rand()%2;

		switch (childID)
		{
			case 1:
			// FAHRZEUGFUEHRER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/fahrzeugfuehrer.e4p", Target->GetName());
			break;

			case 2:
			//FEUERWEHRMANN
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/feuerwehrmann.e4p", Target->GetName());
			break;

			case 3:
			// FEUERWEHRMANN ATEMSCHUTZ
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/atemschutztraeger.e4p", Target->GetName());
			break;

			case 4:
			// FEUERWEHRMANN CSA
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/feuerwehrmann_csa.e4p", Target->GetName());
			break;

			case 5:
			// FEUERWEHR FUEHRUNGSDIENST
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/fuehrungsdienst.e4p",  Target->GetName());
			break;

			case 6:
			//FEUERWEHR TECHNIKER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/techniker.e4p",  Target->GetName());
			break;

			case 7:
			// FEUERWEHR U-DIENST
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/udienst.e4p",  Target->GetName());
			break;

			case 8:
			// NOTARZT
			switch(zufall)
			{
				case 0:
				Person p = Game::CreatePerson("mod:Prototypes/Persons/Ambulance/notarztm.e4p", Target->GetName());				
				break;
				case 1:
				Person p = Game::CreatePerson("mod:Prototypes/Persons/Ambulance/notarztm.e4p", Target->GetName());
				break;
			}
			p.SetAutoHealDistance(0.0f);
			p.SetEquipment(EQUIP_EMERGENCY_CASE);
			break;

			case 9:
			// RETTUNGSASSISTENT
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Ambulance/paramedic_upgraded2.e4p", Target->GetName());
			break;

			case 10:
			// BESTATTER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Ambulance/bestatter.e4p", Target->GetName());
			break;

			case 11:
			// POLIZIST
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Polizei Hamburg/polizist.e4p",  Target->GetName());
			break;

			case 12:
			// KRIPO BEAMTER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Polizei Hamburg/kripobeamter.e4p", Target->GetName());
			break;

			case 13:
			// FEUERWEHR TAUCHER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/taucher.e4p", Target->GetName());
			break;

			case 14:
			// THW ZUGFÜHRER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/TEC/thw_el.e4p", Target->GetName());
			break;

			case 15:
			// THW GRUPPENFÜHRER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/TEC/thw_el.e4p", Target->GetName());
			break;

			case 16:
			// THW HELFER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/TEC/thw.e4p", Target->GetName());
			break;

			case 17:
			// HOEHENRETTER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/hoehenretter.e4p", Target->GetName());
			break;

			case 18:
			// VATTENFALL TECHNIKER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/TEC/vattenfall.e4p", Target->GetName());
			break;

			case 19:
			// A DIENST
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/adienst.e4p", Target->GetName());
			break;

			case 20:
			// ZUGFÜHRER
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/zugfuehrer.e4p", Target->GetName());
			break;

			case 21:
			//FEUERWEHRMANN DLK
			Person p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/feuerwehrmann_dlk.e4p", Target->GetName());
			break;

		}

		if (Game::IsMultiplayer())
		{
			p.SetPlayerMP(Caller->GetPlayerMP());
		}

		Vehicle vec(Target);
		vec.AddPassenger(&p);
	}
};











//////////////////////////////////////////////////////////////////////////////////////////////////// BLOCK: "UMZIEHEN":




object ChangeToMask: CommandScript
{
	ChangeToMask()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_GETEQUIPMENT);
	}

	bool CheckPossible(GameObject *Caller)
	{
		Person p(Caller);
		if (!p.IsValid())
			return false;

		if (p.IsInDLKBasket())
			return false;

		if (p.IsContaminated() || p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.IsPulling() || p.IsEquipped() || p.GetEnteredCarID() !=-1)
			return false;

		if (p.HasCommand("Geraet_installiert"))
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetType() != ACTOR_VEHICLE)
			return false;

		Vehicle v(Target);
		if (v.HasCommand("ich_fuehre_pa"))
			return true;

		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EQUIPMENTDOOR);
		Caller->PushActionTurnTo(ACTION_APPEND, Target);
		Caller->PushActionSwitchAnim(ACTION_APPEND, "useobjmidloop");
		Caller->PushActionExecuteCommand(ACTION_APPEND, "DummyChange", Target, 1, false);
	}
};

object ChangeToABC: CommandScript
{
	ChangeToABC()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_GETEQUIPMENT);
	}

	bool CheckPossible(GameObject *Caller)
	{
		Person p(Caller);
		if (!p.IsValid())
			return false;

		if (p.IsInDLKBasket())
			return false;

		if (p.IsContaminated() || p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.IsPulling() || p.IsEquipped() || p.GetEnteredCarID() != -1)
			return false;

		if (p.HasCommand("Geraet_installiert"))
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetType() != ACTOR_VEHICLE)
			return false;

		Vehicle v(Target);
		if (v.HasCommand("ich_fuehre_csa"))
			return true;

		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EQUIPMENTDOOR);
		Caller->PushActionTurnTo(ACTION_APPEND, Target);
		Caller->PushActionSwitchAnim(ACTION_APPEND, "useobjmidloop");
		Caller->PushActionExecuteCommand(ACTION_APPEND, "DummyChange", Target, 2, false);
	}
};

object ChangeToDiver: CommandScript
{
	ChangeToDiver()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_GETEQUIPMENT);
	}

	bool CheckPossible(GameObject *Caller)
	{
		Person p(Caller);
		if (!p.IsValid())
			return false;

		if (p.IsInDLKBasket())
			return false;

		if (p.IsContaminated() || p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.IsPulling() || p.IsEquipped() || p.GetEnteredCarID() != -1)
			return false;

		if (p.HasCommand("Geraet_installiert"))
			return false;

		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetType() != ACTOR_VEHICLE)
			return false;

		Vehicle v(Target);
		if (v.HasCommand("ich_fuehre_tauchgeraet"))
			return true;

		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EQUIPMENTDOOR);
		Caller->PushActionTurnTo(ACTION_APPEND, Target);
		Caller->PushActionSwitchAnim(ACTION_APPEND, "useobjmidloop");
		Caller->PushActionExecuteCommand(ACTION_APPEND, "DummyChange", Target, 3, false);
	}
};

object ChangeToFireFighter: CommandScript
{
	ChangeToFireFighter()
	{
		SetValidTargets(ACTOR_VEHICLE);
		SetGroupID(CGROUP_GETEQUIPMENT);
	}

	bool CheckPossible(GameObject *Caller)
	{
		Person p(Caller);
		if (!p.IsValid())
			return false;

		if (p.IsInDLKBasket())
			return false;

		if (p.IsContaminated() || p.IsCarryingPerson() || p.IsLinkedWithPerson() || p.IsPulling() || p.IsEquipped() || p.GetEnteredCarID() != -1)
			return false;

		if (p.HasCommand("Geraet_installiert"))
			return false;

		return true;
	}

	bool CheckGroupVisibility(GameObject *Caller)
	{
		if (Caller->GetType() != ACTOR_PERSON)
			return false;
		return !Caller->IsEquipped();
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || Target->GetType() != ACTOR_VEHICLE)
			return false;

		Vehicle v(Target);
		if (v.IsFirefighter())
			return true;

		return false;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Caller->PushActionMove(ACTION_NEWLIST, Target, TARGET_EQUIPMENTDOOR);
		Caller->PushActionTurnTo(ACTION_APPEND, Target);
		Caller->PushActionSwitchAnim(ACTION_APPEND, "useobjmidloop");
		Caller->PushActionExecuteCommand(ACTION_APPEND, "DummyChange", Target, 4, false);
	}
};

object DummyChange: CommandScript
{
	DummyChange()
	{
		SetGroupID(20);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
                float r[9];
                Person p;
                Vector Pos=Caller->GetPosition();
                Caller->GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
		Caller->SetCommandable(false);
		Caller->PushActionWait(ACTION_APPEND, 6.f);
                if(childID == 1)
                {
                        p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/atemschutztraeger.e4p", Caller->GetName());
                }

                if(childID == 2)
                {
                        p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/feuerwehrmann_csa.e4p", Caller->GetName());
                }

                if(childID == 3)
                {
                        p = Game::CreatePerson("mod:Prototypes/Persons/Fire Department/diver_upgraded2.e4p", Caller->GetName());
                }

                if(childID == 4)
                {
                        p = Game::CreatePerson("mod:Prototypes/Persons/Feuerwehr Hamburg/feuerwehrmann.e4p", Caller->GetName());
                }

		if (Game::FindFreePosition(Caller, Pos))
		{
			p.SetPosition(Pos);
			p.SetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
			p.Hide();
		}
		else
		{
			Target->AddPassenger(&p);
		}

		if (Game::IsMultiplayer())
		{
			p.SetPlayerMP(Caller->GetPlayerMP());
		}

		if (Caller->IsSelected())
		{
			Caller->Deselect();
			p.Select();
		}
		Caller->PushActionDeleteOwner(ACTION_APPEND);
		p.SetCommandable(false);
		p.PushActionWait(ACTION_APPEND, 5.f);
		p.PushActionShowHide(ACTION_APPEND, false);
		p.SetCommandable(true);
	}
};